/**
 * <h1> 介绍
 * <p>  本模块负责处理用户角色的校验，提供用于角色鉴权的方法
 * <p>  同时，本模块整合了 Sa-Token 框架，使得项目可以使用框架提供的注解和方法进行鉴权
 * <p><a href="https://sa-token.cc/doc.html#/">
 *      Sa-Token 说明文档 </a>
 * <br> F12 在控制台执行 <u> localStorage.isStarRepo = new Date().getTime() </u> 后刷新页面，可绕过弹窗
 * <p>
 * <h1> 角色、权限划分
 * <p>  本项目划分有如下角色：
 * <ul>
 * <li> 学生
 * <li> 教师
 * <li> 社团成员
 * <li> 社团负责人
 * <li> 超级管理员
 * </ul>
 * <p>  一个用户拥有多重角色，每组角色对应的权限如下：
 * <ul>
 * <li> 超级管理员：
 * <p>  来源：内定（超级管理员指的是，参与系统开发、维护、编码和数据管理的工作人员）
 * <br> 权限：拥有该系统的<b>所有</b>权限
 * <br>
 * <li> 教师 & 社团负责人（简称：教师负责人）
 * <p>  来源：由超级管理员任命
 * <br> 权限：仅在其所在的社团内部拥有所有权限
 * <br>
 * <li> 学生 & 社团负责人（简称：学生负责人）：
 * <p>  来源：由教师负责人任命
 * <br> 权限：仅对其负责的社团拥有大部分权限
 * <br>
 * <li> 社团成员：
 * <p>  用户加入社团后拥有这个角色
 * <br> 该用户仅在其所在的社团内部拥有小部分权限
 * <br>
 * <li> 学生 | 教师：
 * <p>  来源：用户自注册起就拥有学生或教师角色（这两个角色理应是互斥的，不能同时拥有）
 * <br> 权限：这两个角色仅作身份标记，单独看没有特殊权限，要和其他角色配合使用
 * </ul>
 * <p>  注意：本系统的权限设计采用简单层级结构，呈单链式
 * <p>  绝大部分接口的权限设计遵循：超级管理员 > 教师负责人 > 学生负责人 > 社团成员
 * <br> 简单来说就是，学生负责人能做的，教师负责人也能做；教师负责人能做的，超级管理员也能做
 * <p>  多数时候不区分教师负责人和学生负责人，统一称为社团负责人
 * <p>
 * <h1> 对谁鉴权
 * <p>  对请求的发起者进行鉴权，鉴定其“是否拥有权力”来执行该操作
 * <p>  例如：<u>社团负责人给社团成员分配座位</u>
 * <br> 需验证发起请求的用户是否拥有“社团负责人”角色，而且必须是“这个社团的负责人”，确保其有“分配座位”的权力。
 *      业务逻辑还可能会要求：只许分给“这个社团的成员”，不能给其他人。
 * <br> “社团成员”不是执行者，其身份的校验不属于鉴权，更多是属于保证业务逻辑正确和保证数据正确
 * <p>
 * <h1> 使用 Sa-Token 提供的注解进行鉴权
 * <p>  Sa-Token 提供注解鉴权和方法鉴权两种方式，推荐使用注解鉴权
 * <p>  使用注解使得将鉴权与业务代码更分离，而且代码写起来更简单，只需在 controller 的方法上加上鉴权注解即可
 * <p>  框架会识别出携带有鉴权注解的方法，收到 http 请求时，会先在 interceptor 层校验身份，
 *      校验通过后请求才会进入 controller 层，所以用注解比调方法执行起来更高效
 * <p>
 * <h2> 登录校验
 * <p>  使用 <b> @SaCheckLogin </b> 修饰的方法，只有登录之后才能进入
 * <p>  已做了配置，用户登录后框架保存 userId，之后都是通过 userId 进行其他校验
 * <p>
 * <h2> 获取当前登录用户的 userId
 * <p>  <b> String userId = (String)( StpUtil.getLoginId() ); </b>
 * <p>
 * <h2> 角色校验
 * <p>  使用 <b> @SaCheckRole </b> 修饰的方法，必须具有指定角色才能进入
 * <p>  注意：
 * <ol>
 * <li> 角色码请使用枚举常量：{@link team.project.module.auth.export.model.enums.AuthRole AuthRole}
 * <li> @SaCheckRole 自带登录校验，不需要多写 @SaCheckLogin
 * <li> 用 @SaCheckRole( CLUB_MANAGER ) 可以校验用户是否为“社团负责人”，但这只是初步校验，
 *      如果校验通过，只能说明该用户是某社团的负责人，并不知道到底是哪个社团的负责人（因为该校验只用到 userId 而没用到 clubId）
 *      若要验证其是否是属于这个社团，详见下方“进一步鉴权”
 * <li> 超级管理员能通过所有 @SaCheckRole( XXX ) 校验，不需多写 @SaCheckRole( SUPER_ADMIN )
 * <p>  这是考虑到“超级管理员”角色的特殊性，针对鉴权做的特例，详见拦截器配置中
 *      {@link team.project.module.auth.internal.interceptor.InterceptorConfig#getRoleList getRoleList()}
 *      的实现逻辑。数据库中保存的角色码是分开的，“超级管理员”和其他角色互不干涉
 * </ol>
 * <h1> 进一步鉴权
 * <p>  Sa-Token 框架可以完成一部分鉴权工作，除此之外本模块还提供有用于进一步角色鉴权的方法，
 * <br> 这些进一步的鉴权方法，实际上是整合了各模块所提供的，关于判断用户身份、角色的方法
 * <br> 详见：{@link team.project.module.auth.export.service.AuthServiceI AuthServiceI}
 * <p>
 */
package team.project.module.auth;
