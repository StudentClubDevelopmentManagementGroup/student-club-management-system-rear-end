<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="team.project.module.club.personnelchanges.internal.mapper.TblUserClubMapper">

    <resultMap id="userMasVO" type="team.project.module.club.personnelchanges.internal.model.datatransfer.UserMsgDTO">
        <!-- 数据库字段 -->                  <!-- java 类属性 -->
        <result column="user_id"                 property="userId" />
    </resultMap>


    <resultMap id="userInfo" type="team.project.module.user.export.model.datatransfer.UserInfoDTO">
        <!-- 数据库字段 -->                  <!-- java 类属性 -->
        <result column="user_id"                 property="userId" />
        <result column="department_id"                 property="departmentId" />
        <result column="mail"                    property="email" />
    </resultMap>
    <update id="createManager">
        insert into tbl_user_club (role, user_id, club_id)
        values (2, #{userId}, #{clubId})
    </update>

    <update id="setManager">
        update tbl_user_club set role = role | 2
        where user_id = #{userId} and club_id = #{clubId} and is_deleted = 0 and role &amp; 2
    </update>

    <update id="quashManager">
        update tbl_user_club set role = role &amp; ~2
        where user_id = #{userId} and club_id = #{clubId} and is_deleted = 0 and role &amp; 2
    </update>

    <update id="quashMember">
        update tbl_user_club set is_deleted = 1 where user_id = #{userId} and club_id = #{clubId} and is_deleted = 0
    </update>

    <select id="selectManagerRole" resultType="team.project.module.club.management.internal.model.entity.TblUserClubDO">
        select * from tbl_user_club where user_id = #{userId} and club_id = #{clubId} and role &amp; 2
    </select>

    <select id="selectOne"
            resultType="team.project.module.club.management.internal.model.entity.TblUserClubDO">
    </select>
    <select id="selectRootROle" resultType="team.project.module.club.management.internal.model.entity.TblUserClubDO"
            parameterType="java.lang.String">

    </select>
    <select id="selectMemberRole" resultType="team.project.module.club.management.internal.model.entity.TblUserClubDO"
            parameterType="java.lang.String">

    </select>

    <select id="selectClubMember"
            resultMap="userMasVO">
        select user_id  from tbl_user_club where  club_id = #{clubId} and  is_deleted = 0
    </select>

    <select id="selectClubMemberInfo"
            resultMap="userInfo">
        select c.user_id,c.department_id, c.name, c.tel, c.mail, c.role from tbl_user c where user_id in (
        select user_id from tbl_user_club where  club_id = #{clubId} and  is_deleted = 0 )
    </select>
    <select id="selectClubMemberInfoByNameAndDepartmentId"
            resultType="team.project.module.user.export.model.datatransfer.UserInfoDTO">
        select c.user_id,c.department_id, c.name, c.tel, c.mail, c.role from tbl_user c where user_id in (
        select user_id from tbl_user_club where  is_deleted = 0 ) and c.department_id = #{departmentId} and c.name like #{name}
    </select>
    <select id="selectClubMemberInfoByName"
            resultType="team.project.module.user.export.model.datatransfer.UserInfoDTO">
        select c.user_id,c.department_id, c.name, c.tel, c.mail, c.role from tbl_user c where user_id in (
        select user_id from tbl_user_club where  is_deleted = 0 ) and c.name like #{name}
    </select>
    <select id="selectClubMemberByDepartmentId"
            resultType="team.project.module.club.personnelchanges.internal.model.datatransfer.UserMsgDTO">
        select c.user_id,c.department_id, c.name, c.tel, c.mail, c.role from tbl_user c where user_id in (
        select user_id from tbl_user_club where  is_deleted = 0 ) and c.department_id = #{departmentId}
    </select>

    <!--     TODO xml文件加上逻辑删除-->

    <insert id="createMember">
        insert into tbl_user_club (role, user_id, club_id)
        values (1, #{userId}, #{clubId})
    </insert>
<!--思路：删除社员用使用逻辑删除，所有社员的查询均带上排除逻辑删除条件-->
</mapper>
